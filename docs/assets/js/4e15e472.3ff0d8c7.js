"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[636],{1326:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"Firmware/protocal","title":"Communication Protocol \ud83d\udef0\ufe0f","description":"Overview","source":"@site/docs/Firmware/protocal.md","sourceDirName":"Firmware","slug":"/Firmware/protocal","permalink":"/delta6/docs/Firmware/protocal","draft":false,"unlisted":false,"editUrl":"https://github.com/WinGs-Robotics/delta6/docs/Firmware/protocal.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Microcontroller Setup \ud83d\udda5\ufe0f","permalink":"/delta6/docs/Firmware/Arduino"},"next":{"title":"Calibration Procedure \ud83c\udfaf","permalink":"/delta6/docs/Firmware/Calibration"}}');var i=t(4848),s=t(8453);const l={sidebar_position:2},d="Communication Protocol \ud83d\udef0\ufe0f",c={},a=[{value:"Overview",id:"overview",level:2},{value:"\ud83d\udcf1 Command Frame Format (PC \u2192 Firmware)",id:"-command-frame-format-pc--firmware",level:2},{value:"\ud83d\udce5 Response Frame Format (Firmware \u2192 PC)",id:"-response-frame-format-firmware--pc",level:2},{value:"\ud83d\udd27 Functional Details",id:"-functional-details",level:2},{value:"Calibration Function",id:"calibration-function",level:3},{value:"Read Function",id:"read-function",level:3},{value:"Error Handling",id:"error-handling",level:3},{value:"Data Integrity",id:"data-integrity",level:3},{value:"\ud83d\udccc Notes",id:"-notes",level:2},{value:"Acknowledgment",id:"acknowledgment",level:2}];function o(e){const n={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"communication-protocol-\ufe0f",children:"Communication Protocol \ud83d\udef0\ufe0f"})}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"This document describes the communication protocol between the PC (host) and the Delta6 end-effector firmware, including command formats, response formats, functional descriptions, and error handling mechanisms."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-command-frame-format-pc--firmware",children:"\ud83d\udcf1 Command Frame Format (PC \u2192 Firmware)"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{style:{textAlign:"center"},children:"Field"}),(0,i.jsx)(n.th,{style:{textAlign:"center"},children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"center"},children:"Start Byte"}),(0,i.jsxs)(n.td,{style:{textAlign:"center"},children:[(0,i.jsx)(n.code,{children:"0xAA"}),", indicates the beginning of a frame"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"center"},children:"Command Byte"}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:"Operation code (Calibration or Read)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"center"},children:"Checksum"}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:"Simple additive checksum"})]})]})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Command Byte Values"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"0x01"}),": ",(0,i.jsx)(n.strong,{children:"Calibration Command"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"0x02"}),": ",(0,i.jsx)(n.strong,{children:"Read Command"})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Checksum"}),":",(0,i.jsx)(n.br,{}),"\n","The checksum is calculated as the simple sum of the start byte and command byte, modulo 256."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-response-frame-format-firmware--pc",children:"\ud83d\udce5 Response Frame Format (Firmware \u2192 PC)"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{style:{textAlign:"center"},children:"Field"}),(0,i.jsx)(n.th,{style:{textAlign:"center"},children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"center"},children:"Start Byte"}),(0,i.jsxs)(n.td,{style:{textAlign:"center"},children:[(0,i.jsx)(n.code,{children:"0xAA"}),", indicates the beginning of a frame"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"center"},children:"Sensor 1 Data"}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:"2 bytes (signed integer, calibrated angle)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"center"},children:"..."}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:"..."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"center"},children:"Sensor 6 Data"}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:"2 bytes (signed integer, calibrated angle)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"center"},children:"Error Flags"}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:"1 byte (each bit indicates a sensor read error)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"center"},children:"Checksum"}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:"1 byte (simple additive checksum)"})]})]})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Sensor Data"}),":",(0,i.jsx)(n.br,{}),"\n","Each sensor outputs a signed 2-byte integer representing the calibrated angle."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Error Flags"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"1 byte total."}),"\n",(0,i.jsxs)(n.li,{children:["Each bit corresponds to one sensor.",(0,i.jsx)(n.br,{}),"\n","If a bit is ",(0,i.jsx)(n.code,{children:"1"}),", the corresponding sensor encountered a read error."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Checksum"}),":",(0,i.jsx)(n.br,{}),"\n","The checksum is calculated as the simple sum of all bytes after the start byte."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-functional-details",children:"\ud83d\udd27 Functional Details"}),"\n",(0,i.jsx)(n.h3,{id:"calibration-function",children:"Calibration Function"}),"\n",(0,i.jsxs)(n.p,{children:["Upon receiving a ",(0,i.jsx)(n.strong,{children:"Calibration Command (0x01)"}),", the firmware:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Reads the current angle values from all sensors."}),"\n",(0,i.jsx)(n.li,{children:"Stores them as calibration offsets."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"read-function",children:"Read Function"}),"\n",(0,i.jsxs)(n.p,{children:["Upon receiving a ",(0,i.jsx)(n.strong,{children:"Read Command (0x02)"}),", the firmware:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Reads the current sensor values."}),"\n",(0,i.jsx)(n.li,{children:"Subtracts calibration offsets."}),"\n",(0,i.jsx)(n.li,{children:"Sends the calibrated values along with error flags and checksum."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,i.jsxs)(n.p,{children:["In the ",(0,i.jsx)(n.code,{children:"updatePositions()"})," function:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["If a sensor read returns ",(0,i.jsx)(n.code,{children:"-1"}),", the corresponding error flag bit is set."]}),"\n",(0,i.jsx)(n.li,{children:"Errors are reported in the response frame's error flag byte."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"data-integrity",children:"Data Integrity"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"A simple additive checksum ensures data integrity."}),"\n",(0,i.jsx)(n.li,{children:"CRC can be used for more robust error detection if needed."}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-notes",children:"\ud83d\udccc Notes"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Start byte ",(0,i.jsx)(n.code,{children:"0xAA"})," must always be included at the beginning of each frame."]}),"\n",(0,i.jsxs)(n.li,{children:["Only two commands (",(0,i.jsx)(n.code,{children:"0x01"})," and ",(0,i.jsx)(n.code,{children:"0x02"}),") are currently supported."]}),"\n",(0,i.jsxs)(n.li,{children:["All multi-byte data are transmitted ",(0,i.jsx)(n.strong,{children:"big-endian"})," unless otherwise specified."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.p,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"This communication protocol ensures reliable, efficient interaction between the PC and the Delta6 firmware, enabling robust 6-DOF force-sensing operations."})]}),"\n",(0,i.jsx)(n.h2,{id:"acknowledgment",children:"Acknowledgment"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Some parts of the documentation and code were assisted by language models (OpenAI's ChatGPT) during their initial drafting. All content was subsequently reviewed and verified by the project authors."})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>d});var r=t(6540);const i={},s=r.createContext(i);function l(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);