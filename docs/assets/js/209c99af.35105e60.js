"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[162],{6523:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"Python-SDK/Advance","title":"Advanced Usage \ud83d\ude80","description":"This section provides a detailed explanation of the DeltaRobot class located at:","source":"@site/docs/Python-SDK/Advance.md","sourceDirName":"Python-SDK","slug":"/Python-SDK/Advance","permalink":"/delta6/docs/Python-SDK/Advance","draft":false,"unlisted":false,"editUrl":"https://github.com/WinGs-Robotics/delta6/docs/Python-SDK/Advance.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Quick Start Examples \ud83d\udca1","permalink":"/delta6/docs/Python-SDK/Examples"}}');var i=t(4848),r=t(8453);const l={sidebar_position:3},a="Advanced Usage \ud83d\ude80",o={},d=[{value:"1. Initialization",id:"1-initialization",level:2},{value:"2. Main Interfaces",id:"2-main-interfaces",level:2},{value:"2.1 Updating Joint States",id:"21-updating-joint-states",level:3},{value:"2.2 Forward Kinematics",id:"22-forward-kinematics",level:3},{value:"2.3 Inverse Kinematics",id:"23-inverse-kinematics",level:3},{value:"2.4 Force Estimation",id:"24-force-estimation",level:3},{value:"2.5 Force-to-Torque Mapping",id:"25-force-to-torque-mapping",level:3},{value:"2.6 Force-to-Pose Mapping",id:"26-force-to-pose-mapping",level:3},{value:"3. Internal Model Details",id:"3-internal-model-details",level:2},{value:"4. Summary",id:"4-summary",level:2}];function c(e){const n={blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"advanced-usage-",children:"Advanced Usage \ud83d\ude80"})}),"\n",(0,i.jsxs)(n.p,{children:["This section provides a detailed explanation of the ",(0,i.jsx)(n.strong,{children:"DeltaRobot"})," class located at:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"delta6_python_SDK/kinematics/delta6_analytics.py\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"DeltaRobot"})," class offers methods for advanced kinematics calculations, force estimation, and internal torque computations for the Delta6 system."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"1-initialization",children:"1. Initialization"}),"\n",(0,i.jsx)(n.p,{children:"Create a Delta6 robot model by specifying its physical parameters:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from kinematics.delta6_analytics import DeltaRobot\r\n\r\ndelta6 = DeltaRobot(\r\n    short_arm_length=40.0,         # Length of the short (servo) arm [mm]\r\n    parallel_arm_length=120.0,     # Length of the parallel (linkage) arm [mm]\r\n    base_radius=72.0,              # Radius of the fixed base [mm]\r\n    end_effector_radius=21.24      # Radius of the moving end-effector platform [mm]\r\n)\n"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["\ud83d\udccc ",(0,i.jsx)(n.strong,{children:"Note:"})," Default values are already tuned for the Delta6 system."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"2-main-interfaces",children:"2. Main Interfaces"}),"\n",(0,i.jsx)(n.h3,{id:"21-updating-joint-states",children:"2.1 Updating Joint States"}),"\n",(0,i.jsx)(n.p,{children:"You can update the robot's internal state (angles and torques) using:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"delta6.update(theta1, theta2, theta3, theta4, theta5, theta6)\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"theta1"})," to ",(0,i.jsx)(n.code,{children:"theta6"})," are joint angles (in radians)."]}),"\n",(0,i.jsx)(n.li,{children:"Internally, it updates both joint angles and spring torques."}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"22-forward-kinematics",children:"2.2 Forward Kinematics"}),"\n",(0,i.jsx)(n.p,{children:"To compute the end-effector pose (position and orientation) from joint angles:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"pose = delta6.get_FK_result()\n"})}),"\n",(0,i.jsx)(n.p,{children:"Returns a tuple:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"(x, y, z, roll, pitch, yaw)\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"All positions are in meters (m)."}),"\n",(0,i.jsx)(n.li,{children:"All rotations are in radians (rad)."}),"\n"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["\ud83d\udccc ",(0,i.jsx)(n.strong,{children:"Tip:"})," The Delta6 model internally handles the mechanical offsets and link geometry."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"23-inverse-kinematics",children:"2.3 Inverse Kinematics"}),"\n",(0,i.jsx)(n.p,{children:"To solve the required joint angles for a given target pose:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"thetas = delta6.inverse_kinematics(x, y, z, roll, pitch, yaw)\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Input: desired position (m) and orientation (rad)."}),"\n",(0,i.jsxs)(n.li,{children:["Output: six joint angles ",(0,i.jsx)(n.code,{children:"(theta1, theta2, theta3, theta4, theta5, theta6)"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Returns ",(0,i.jsx)(n.code,{children:"None"})," if the target is unreachable."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"24-force-estimation",children:"2.4 Force Estimation"}),"\n",(0,i.jsx)(n.p,{children:"To estimate the end-effector force/torque from spring readings:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"force = delta6.get_end_force()\n"})}),"\n",(0,i.jsx)(n.p,{children:"Returns a tuple:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"(Fx, Fy, Fz, Mx, My, Mz)\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Forces are in Newtons (N)."}),"\n",(0,i.jsx)(n.li,{children:"Moments are in Newton-meters (Nm)."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Internally, it uses the joint torques and geometric Jacobians."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"25-force-to-torque-mapping",children:"2.5 Force-to-Torque Mapping"}),"\n",(0,i.jsx)(n.p,{children:"Given a desired force vector at the end-effector, you can calculate the required torques:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"torques = delta6.calculate_torque_123(Fx_target, Fy_target, Fz_target)\n"})}),"\n",(0,i.jsx)(n.p,{children:"Useful for simulating force control."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"26-force-to-pose-mapping",children:"2.6 Force-to-Pose Mapping"}),"\n",(0,i.jsxs)(n.p,{children:["Given a full 6-DOF wrench ",(0,i.jsx)(n.code,{children:"(Fx, Fy, Fz, Mx, My, Mz)"}),", estimate the corresponding pose:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"pose = delta6.calculate_euler_pose(Fx, Fy, Fz, Mx, My, Mz)\n"})}),"\n",(0,i.jsx)(n.p,{children:"Returns:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"(x, y, z, roll, pitch, yaw)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This is useful for ",(0,i.jsx)(n.strong,{children:"force-sensitive end-effector control"})," based on spring torque feedback."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"3-internal-model-details",children:"3. Internal Model Details"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["\u2699\ufe0f ",(0,i.jsx)(n.strong,{children:"Mechanics:"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"The Delta6 kinematics assumes 3 symmetric legs."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"It internally applies mechanical z-offset corrections."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Rotations are handled using ",(0,i.jsx)(n.strong,{children:"scipy.spatial.transform"})," Euler conversion utilities."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Forces are estimated based on spring extension/compression, taking into account the Delta geometry."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"4-summary",children:"4. Summary"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Function"}),(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Purpose"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"update()"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Update joint angles and compute torques"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"get_FK_result()"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Compute end-effector pose from joint states"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"inverse_kinematics()"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Solve joint states from target pose"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"get_end_force()"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Estimate forces and moments"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"calculate_torque_123()"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Map desired forces to spring torques"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"calculate_euler_pose()"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Map desired forces/moments to end-effector pose"})]})]})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.p,{children:["\ud83c\udfaf ",(0,i.jsx)(n.strong,{children:"Advanced Tip:"}),(0,i.jsx)(n.br,{}),"\n","You can combine real-time encoder readings + ",(0,i.jsx)(n.code,{children:"update()"})," + ",(0,i.jsx)(n.code,{children:"get_end_force()"})," to build a ",(0,i.jsx)(n.strong,{children:"real-time force estimation loop"}),", enabling force-controlled teleoperation or haptic feedback applications."]}),"\n",(0,i.jsx)(n.hr,{})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>a});var s=t(6540);const i={},r=s.createContext(i);function l(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);